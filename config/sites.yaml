parionsport:
  home_page: https://www.enligne.parionssport.fdj.fr
  absolute_url: False
  tags_chamionship:
    sport: //li[@class="psel-quicknav__item"] 
    # //button[@pselautotestid="quick_nav_ept_sport_item"] 
    sport_name:  //span[@pselautotestid="quick_nav_ept_sport_lbl"]/text()
    country_name:  .//span[@pselautotestid="quick_nav_ept_category_lbl"]//text()
    country : .//psel-ept-competitions
    championship:  //li[@pselautotestid="quick_nav_ept_competition_lbl"]
    championship_name: .//a[@pseltcclick="quickaccess_eptCompetition"]//text()
  tags_button:
    bet_filter: .//button[@class="psel-filters__label" and contains(., "1 N 2") and not(contains(., "Handicap"))]
    cookies: .//button[@id="popin_tc_privacy_button_2"]
  tags_odd: 
    date : //h2[@class="psel-title-rubric__text"]
    bloc_match: //psel-event-main
    date_hours: .//time[@class="psel-timer"]/text() 
    bloc_odd: .//psel-templates
    name_team: .//p[@class="psel-market__label"]//text() #.//p[@class="psel-market__label ng-star-inserted"]/text()
    odd:  .//span[@class="psel-outcome__data"]/text()
  data-odd-type:
    - Win
    - Draw
    - Win

betclic :
  home_page : https://www.betclic.fr/
  absolute_url : False
  tags_chamionship :
    sport:  //sports-tile[@routerlinkactive="active-link" and  contains(@class,"sportList_item ")] #//a[@class="sportList_itemWrapper" and @id="block-link-null"] #//a[@class="sportList_itemWrapper" and @id="block-link-null"]/div[@class="sportlist_name"]
    sport_name:  //a[@class="sportList_itemWrapper" and @id="block-link-null"]/div[@class="sportlist_name"]/text()
    country_name:  //div[@class="sportList_itemWrapper"]/div[@class="sportlist_name"]/text() 
    country : .//ul//li[@routerlinkactive="active-link"] #.//li[@routerlinkactive="active-link" and @class="sportList_item has-children ng-star-inserted"]
    championship :  //ul[@class="sportList_listLv2 ng-star-inserted"]//div[@class="sportlist_name"]
    championship_name :   //ul[@class="sportList_listLv2 ng-star-inserted"]//div[@class="sportlist_name"]/text()
  tags_button:
    bet_filter:
    cookies: //button[@id="popin_tc_privacy_button_2" and @class="tc-reset-css tc-privacy-button"]
  tags_odd:
    date : //h2[@class="groupEvents_headTitle"]/text()
    bloc_match: //sports-events-event[@class="groupEvents_card ng-star-inserted"] 
    date_hours: .//div[@class="event_infoTime ng-star-inserted"]/text() 
    bloc_odd: //div[@class="market_odds ng-star-inserted"]
    name_team:  //div[contains(@class,"scoreboard_contestantLabel ")]/text()
    odd:  .//span[contains(@class,"oddValue")]/text()
    match: 
  data-odd-type:
    - Win
    - Draw
    - Win

bet365: 
  home_page : https://www.bet365.com/
  absolute_url : False
  tags_chamionship :
    sport: //div[@class="wn-PreMatchItem "]/span
    sport_name: //div[@class="wn-PreMatchItem "]/span/text()
    group :  //div[@class="sm-SplashMarketGroupButton_Text "]
    country_name:  
    championship : //div[@class="sm-SplashMarket_Title "]
    championship_name : //span[@class="sm-CouponLink_Title "]/text()
  tags_button:
    cookies: .//button[@id="popin_tc_privacy_button_2"]
  tags_odd:
    bloc_teams_hours_date : //div[@class="rcl-ParticipantFixtureDetails_LhsContainerInner "]
    name_team : //div[@class="rcl-ParticipantFixtureDetailsTeam_TeamName "]
    date : //div[@class="rcl-MarketHeaderLabel rcl-MarketHeaderLabel-isdate "]
    hours : //div[@class="rcl-ParticipantFixtureDetails_BookCloses "]
    columns_odd :  //div[contains(@class,"MarketOddsExpand")]
    info_column_which_teams_win :  //div[@class="rcl-MarketColumnHeader "]
    odd : //span[@class="sgl-ParticipantOddsOnly80_Odds"]
  data-odd-type:
    - Win
    - Draw
    - Win

# https://www.peopleperhour.com/freelance-jobs/technology-programming/programming-coding/web-scraping-prices-of-insurance-providers-3290248




# https://github.com/migoya2020/bet365-playwright-starter


#//li[@class="psel-quicknav__item"]//li[not(@*)]

#//ul[@class='psel-quicknav__list psel-quicknav__list-level-2']/psel-ept-categories/li[not(@*)]


import undetected_chromedriver.v2 as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
from bs4 import BeautifulSoup

# ... Your existing imports ...

class SiteScraper(BaseScraper):
    # ... Your existing code ...

    def click_element(self, element):
        try:
            element.click()
        except:
            # Scroll to the element if it is not in the visible area
            actions = ActionChains(self.driver)
            actions.move_to_element(element).perform()
            # Wait for the element to be clickable
            wait = WebDriverWait(self.driver, 10)
            element = wait.until(EC.element_to_be_clickable(element))
            element.click()

    def extract_sports(self, home_page: BeautifulSoup) -> list[Sport]:
        """Extract all sports from the home page
        Args:
            home_page (str): The home page of the website to scrape

        Returns:
            list[Sport]: The list of all sports
        """
        sports = []
        sports_buttons = self.safe_get(self.driver.driver, self.tags_chamionship["sport"])
        sports_name = self.safe_get(home_page, self.tags_chamionship["sport_name"])
        for sport_button, sport_name in zip(sports_buttons, sports_name):
            try:
                self.click_element(sport_button)
            except Exception as e:
                scraper_logger.error(f"Failed to click sport button: {e}")
                continue

            self.get_random_sleep_time()
            sport = Sport(sport_name, sport_button)
            countries = self.extract_countries(sport)
            sport.countries.extend(countries)
            scraper_logger.info(
                f"Processing of Sport {sport_name} with {len(countries)} countries"
            )
            sports.append(sport)
        return sports

    def extract_countries(self, sport: Sport) -> list[Country]:
        # ... Your existing code ...

    def extract_competitions(self, country: Country) -> list[Competition]:
        # ... Your existing code ...

    def extract_matches(self) -> list[Match]:
        # ... Your existing code ...

# The rest of your code remains the same...
